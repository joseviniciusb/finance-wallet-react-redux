{"version":3,"sources":["pages/Login.js","actions/index.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/userReducer.js","reducers/walletReducer.js","reducers/index.js","store.js","index.js"],"names":["validateEmail","email","test","Login","state","password","buttonIsEnabled","handleChange","target","setState","name","value","handleSubmit","e","preventDefault","props","saveEmail","history","push","prevProps","prevState","this","length","className","onSubmit","htmlFor","type","data-testid","onChange","disabled","React","Component","connect","dispatch","payload","defaultForm","method","tag","currency","description","Wallet","currenciesNames","form","prev","dispatchAddExpense","checkCurrency","renderExpenses","expenses","dispatchDeleteExpense","dispatchEditExpense","map","item","key","id","parseFloat","toFixed","exchangeRates","ask","onClick","calculateTotal","reduce","acc","a","fetch","then","res","json","Object","keys","filter","aria-label","user","wallet","expense","completeExpense","App","exact","path","render","Boolean","window","location","hostname","match","INITIAL_STATE","currencies","combineReducers","action","newId","filteredExpenses","editedExpenses","foundExpenseIndex","findIndex","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b2c0c884.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { saveUserEmail } from '../actions';\n\nconst MAX_CHARACTER = 6;\n\nfunction validateEmail(email) {\n  return /^\\S+@\\S+\\.\\S+$/.test(email);\n}\n\nclass Login extends React.Component {\n  state = {\n    email: '',\n    password: '',\n    buttonIsEnabled: false,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const { email, password } = this.state;\n    if (prevState.email !== email || prevState.password !== password) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        buttonIsEnabled:\n          validateEmail(email) && password.length >= MAX_CHARACTER,\n      });\n    }\n  }\n\n  handleChange = ({ target }) => {\n    // console.log('depois', validated);\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { email } = this.state;\n    const { saveEmail, history } = this.props;\n    saveEmail(email);\n    history.push('/carteira');\n  };\n\n  render() {\n    const { email, password, buttonIsEnabled } = this.state;\n\n    return (\n      <div className=\"loginContainer\">\n        <form onSubmit={ this.handleSubmit }>\n          <label htmlFor=\"email\">\n            User:\n            <input\n              name=\"email\"\n              type=\"email\"\n              data-testid=\"email-input\"\n              onChange={ this.handleChange }\n              value={ email }\n            />\n          </label>\n          <label htmlFor=\"password\">\n            Password:\n            <input\n              name=\"password\"\n              type=\"password\"\n              data-testid=\"password-input\"\n              onChange={ this.handleChange }\n              value={ password }\n            />\n          </label>\n\n          <button disabled={ !buttonIsEnabled } type=\"submit\">\n            Entrar\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  saveEmail: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveEmail: (email) => {\n    dispatch(saveUserEmail(email));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","export const saveUserEmail = (userEmail) => ({\n  type: 'SAVE_USER_EMAIL',\n  payload: userEmail,\n});\n\nexport const addExpense = (expense) => async (dispatch) => {\n  await fetch('https://economia.awesomeapi.com.br/json/all')\n    .then((res) => res.json())\n    .then((json) => {\n      const completeExpense = { ...expense, exchangeRates: json };\n\n      dispatch({\n        type: 'ADD_EXPENSE',\n        payload: completeExpense,\n      });\n    });\n};\n\nexport const deleteExpense = (expenseId) => ({\n  type: 'DELETE_EXPENSE',\n  payload: expenseId,\n});\n\nexport const editExpense = (expenseId) => ({\n  type: 'EDIT_EXPENSE',\n  payload: expenseId,\n});\n\nexport const updateWallet = (wallet) => ({\n  type: 'UPDATE_WALLET',\n  payload: wallet,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { addExpense, deleteExpense, editExpense } from '../actions';\n\nconst defaultForm = {\n  value: 0,\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n  currency: 'USD',\n  description: '',\n};\n\nclass Wallet extends React.Component {\n  state = {\n    currenciesNames: [],\n    form: { ...defaultForm },\n  };\n\n  async componentDidMount() {\n    await fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState({\n          currenciesNames: Object.keys(json),\n          form: { ...defaultForm, currency: Object.keys(json)[0] },\n        });\n      });\n  }\n\n  handleChange = ({ target }) => {\n    this.setState((prev) => ({\n      ...prev,\n      form: { ...prev.form, [target.name]: target.value },\n    }));\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { form } = this.state;\n    const { dispatchAddExpense } = this.props;\n    dispatchAddExpense(form);\n    this.setState({ form: defaultForm });\n  };\n\n  checkCurrency = (currency) => {\n    switch (currency) {\n    case 'USD':\n      return 'Dólar Comercial';\n    case 'EUR':\n      return 'Euro';\n    default:\n      return currency;\n    }\n  };\n\n  renderExpenses = (expenses) => {\n    const { dispatchDeleteExpense, dispatchEditExpense } = this.props;\n\n    return expenses.map((item) => (\n      <tr key={ item.id }>\n        <td>{item.description}</td>\n        <td>{item.tag}</td>\n        <td>{item.method}</td>\n        <td>{parseFloat(item.value).toFixed(2)}</td>\n        <td>{this.checkCurrency(item.currency)}</td>\n        <td>{parseFloat(item.exchangeRates[item.currency].ask).toFixed(2)}</td>\n        <td>\n          {(item.exchangeRates[item.currency].ask * item.value).toFixed(2)}\n        </td>\n        <td>Real</td>\n        <td>\n          <button\n            data-testid=\"edit-btn\"\n            type=\"button\"\n            onClick={ () => dispatchEditExpense(item.id) }\n          >\n            Editar\n          </button>\n          /\n          <button\n            data-testid=\"delete-btn\"\n            type=\"button\"\n            onClick={ () => dispatchDeleteExpense(item.id) }\n          >\n            Excluir\n          </button>\n        </td>\n      </tr>\n    ));\n  };\n\n  calculateTotal = (expenses) => expenses.reduce(\n    (acc, item) => acc + item.exchangeRates[item.currency].ask * item.value,\n    0,\n  );\n\n  render() {\n    const { currenciesNames, form } = this.state;\n    const { email, expenses } = this.props;\n    return (\n      <>\n        <header>\n          <span data-testid=\"email-field\">{email}</span>\n          <span data-testid=\"total-field\">{this.calculateTotal(expenses)}</span>\n          <span data-testid=\"header-currency-field\"> BRL </span>\n        </header>\n        <form onSubmit={ (e) => this.handleSubmit(e) }>\n          <label htmlFor=\"value\">\n            Valor:\n            <input\n              data-testid=\"value-input\"\n              name=\"value\"\n              type=\"number\"\n              onChange={ this.handleChange }\n              value={ form.value }\n              id=\"value\"\n            />\n          </label>\n          <label htmlFor=\"currency\">\n            Moeda:\n            <select\n              data-testid=\"currency-input\"\n              id=\"currency\"\n              onChange={ this.handleChange }\n              name=\"currency\"\n              value={ form.currency }\n            >\n              {currenciesNames\n                .filter((item) => item !== 'USDT')\n                .map((item) => (\n                  <option data-testid={ item } key={ item } value={ item }>\n                    {item}\n                  </option>\n                ))}\n            </select>\n          </label>\n          <label htmlFor=\"method\">\n            Método de pagamento:\n            <select\n              data-testid=\"method-input\"\n              aria-label=\"method\"\n              id=\"method\"\n              name=\"method\"\n              value={ form.method }\n              onChange={ this.handleChange }\n            >\n              <option value=\"Dinheiro\">Dinheiro</option>\n              <option value=\"Cartão de crédito\">Cartão de crédito</option>\n              <option value=\"Cartão de débito\">Cartão de débito</option>\n            </select>\n          </label>\n          <label htmlFor=\"tag\">\n            Categoria:\n            <select\n              data-testid=\"tag-input\"\n              aria-label=\"tag\"\n              id=\"tag\"\n              name=\"tag\"\n              value={ form.tag }\n              onChange={ this.handleChange }\n            >\n              <option value=\"Alimentação\">Alimentação</option>\n              <option value=\"Lazer\">Lazer</option>\n              <option value=\"Trabalho\">Trabalho</option>\n              <option value=\"Transporte\">Transporte</option>\n              <option value=\"Saúde\">Saúde</option>\n            </select>\n          </label>\n          <label htmlFor=\"description\">\n            Descrição:\n            <input\n              data-testid=\"description-input\"\n              name=\"description\"\n              type=\"text\"\n              value={ form.description }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <button type=\"submit\">Adicionar despesa</button>\n        </form>\n\n        <table>\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>{this.renderExpenses(expenses)}</tbody>\n        </table>\n      </>\n    );\n  }\n}\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  dispatchDeleteExpense: PropTypes.func.isRequired,\n  dispatchEditExpense: PropTypes.func.isRequired,\n  dispatchAddExpense: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchAddExpense: (email) => {\n    dispatch(addExpense(email));\n  },\n  dispatchDeleteExpense: (id) => {\n    dispatch(deleteExpense(id));\n  },\n  dispatchEditExpense: (id) => {\n    dispatch(editExpense(id));\n  },\n});\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route\n        exact\n        path=\"/\"\n        render={ (props) => <Login { ...props } /> }\n      />\n      <Route\n        exact\n        path=\"/carteira\"\n        render={ (props) => <Wallet { ...props } /> }\n      />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const INITIAL_STATE = {\n  email: '',\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'SAVE_USER_EMAIL':\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n","const INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  let newId;\n  let filteredExpenses;\n  let editedExpenses;\n  let foundExpenseIndex;\n\n  switch (action.type) {\n  case 'ADD_EXPENSE':\n    if (state.expenses.length === 0) {\n      newId = 0;\n    } else {\n      newId = state.expenses[state.expenses.length - 1].id * 1 + 1;\n    }\n    return {\n      ...state,\n      expenses: [...state.expenses, { id: newId, ...action.payload }],\n    };\n  case 'DELETE_EXPENSE':\n    filteredExpenses = state.expenses.filter(\n      (item) => item.id !== action.payload,\n    );\n    return { ...state, expenses: filteredExpenses };\n  case 'EDIT_EXPENSE':\n    editedExpenses = [...state.expenses];\n    foundExpenseIndex = editedExpenses.findIndex((item) => (item.id === action.payload));\n    editedExpenses[foundExpenseIndex].value = 666;\n    return { ...state, expenses: editedExpenses };\n  case 'UPDATE_CURRENCIES':\n    return {\n      ...state,\n      currencies: action.currencies,\n    };\n  default:\n    return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport userReducer from './userReducer';\nimport walletReducer from './walletReducer';\n\nexport default combineReducers({\n  user: userReducer,\n  wallet: walletReducer,\n});\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\n\nconst store = createStore(\n  reducers,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}